// <auto-generated />
using System;
using ChatAppServer.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace ChatAppServer.Migrations
{
    [DbContext(typeof(ChatDbContext))]
    partial class ChatDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("ChatAppServer.DataAccess.Entities.ChatroomEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Chatroom");
                });

            modelBuilder.Entity("ChatAppServer.DataAccess.Entities.ChatroomMessageEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ChatroomId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("SentTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ChatroomId");

                    b.HasIndex("SenderId");

                    b.ToTable("ChatroomMessage");
                });

            modelBuilder.Entity("ChatAppServer.DataAccess.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProfilePictureUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("User");
                });

            modelBuilder.Entity("ChatroomEntityUserEntity", b =>
                {
                    b.Property<Guid>("ChatroomsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MembersId")
                        .HasColumnType("uuid");

                    b.HasKey("ChatroomsId", "MembersId");

                    b.HasIndex("MembersId");

                    b.ToTable("ChatroomMember");
                });

            modelBuilder.Entity("ChatAppServer.DataAccess.Entities.ChatroomEntity", b =>
                {
                    b.HasOne("ChatAppServer.DataAccess.Entities.UserEntity", "Owner")
                        .WithMany("OwnedChatrooms")
                        .HasForeignKey("OwnerId");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("ChatAppServer.DataAccess.Entities.ChatroomMessageEntity", b =>
                {
                    b.HasOne("ChatAppServer.DataAccess.Entities.ChatroomEntity", "Chatroom")
                        .WithMany("Messages")
                        .HasForeignKey("ChatroomId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ChatAppServer.DataAccess.Entities.UserEntity", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chatroom");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("ChatroomEntityUserEntity", b =>
                {
                    b.HasOne("ChatAppServer.DataAccess.Entities.ChatroomEntity", null)
                        .WithMany()
                        .HasForeignKey("ChatroomsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChatAppServer.DataAccess.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("MembersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ChatAppServer.DataAccess.Entities.ChatroomEntity", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("ChatAppServer.DataAccess.Entities.UserEntity", b =>
                {
                    b.Navigation("OwnedChatrooms");
                });
#pragma warning restore 612, 618
        }
    }
}
